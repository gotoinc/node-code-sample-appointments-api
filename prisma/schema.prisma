generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  email            String            @unique
  first_name       String
  last_name        String
  created_at       DateTime          @default(now())
  updated_at       DateTime          @default(now())
  user_role_id     Int               @map("fk_user_role_id")
  user_role        UserRole          @relation(fields: [user_role_id], references: [id])
  user_auth_method UserAuthMethod?
  email_auth       EmailCredentials?
  patient          Patient?
  doctor           Doctor?

  @@map("users")
}

model UserRole {
  id        Int    @id @default(autoincrement())
  role_name String @unique
  user      User[]

  @@map("user_roles")
}

model Patient {
  id            Int           @id @default(autoincrement())
  date_of_birth DateTime      @db.Date
  gender        String
  address       String?
  created_at    DateTime      @default(now())
  updated_at    DateTime      @default(now())
  user_id       Int           @unique @map("fk_user_id")
  user          User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  appointments  Appointment[]

  @@map("patients")
}

model Doctor {
  id                Int            @id @default(autoincrement())
  phone_number      String
  licence_number    String
  user_id           Int            @unique @map("fk_user_id")
  specialization_id Int            @map("fk_specialization_id")
  user              User           @relation(fields: [user_id], references: [id], onDelete: Cascade)
  specialization    Specialization @relation(fields: [specialization_id], references: [id])
  timeslots         Timeslot[]
  appointments      Appointment[]

  @@map("doctors")
}

model Specialization {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  doctors Doctor[]

  @@map("specializations")
}

model Appointment {
  id                       Int      @id @default(autoincrement())
  full_name                String
  email                    String
  phone_number             String
  patient_insurance_number String
  reason                   String
  created_at               DateTime @default(now())
  updated_at               DateTime @default(now())
  patient_id               Int      @map("fk_patient_id")
  timeslot_id              Int      @unique @map("fk_timeslot_id")
  doctor_id                Int      @map("fk_doctor_id")
  patient                  Patient  @relation(fields: [patient_id], references: [id])
  timeslot                 Timeslot @relation(fields: [timeslot_id], references: [id])
  doctor                   Doctor   @relation(fields: [doctor_id], references: [id])

  @@map("appointments")
}

model Timeslot {
  id           Int          @id @default(autoincrement())
  start_time   DateTime
  end_time     DateTime
  is_available Boolean      @default(true)
  doctor_id    Int          @map("fk_doctor_id")
  doctor       Doctor       @relation(fields: [doctor_id], references: [id])
  appointments Appointment?

  @@map("timeslots")
}

model EmailCredentials {
  id            Int    @id @default(autoincrement())
  email         String @unique
  password_hash String
  user_id       Int    @unique @map("fk_user_id")
  user          User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("email_credentials")
}

model AuthProvider {
  id                 Int              @id @default(autoincrement())
  auth_provider_name String           @unique
  user_auth_method   UserAuthMethod[]

  @@map("auth_providers")
}

model UserAuthMethod {
  id               Int          @id @default(autoincrement())
  email            String       @unique
  user_id          Int          @unique @map("fk_user_id")
  auth_provider_id Int          @map("fk_auth_provider_id")
  user             User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  auth_provider    AuthProvider @relation(fields: [auth_provider_id], references: [id])

  @@map("user_auth_methods")
}
